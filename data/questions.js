const questions = [
  {
    id: 1,
    question: "What is the difference between == and === in JavaScript?",
    optionA: "No difference",
    optionB: "=== checks value only",
    optionC: "== checks type only",
    optionD: "=== checks both value and type",
    correctAnswer: "D",
    explanation:
      "=== is the strict equality operator that checks both value and type without coercion",
    explanations: {
      A: "Incorrect. There is a significant difference in how they compare values.",
      B: "Incorrect. === checks both value and type, not just value.",
      C: "Incorrect. == performs type coercion, === checks both type and value.",
      D: "Correct! === checks both value and type without type coercion.",
    },
  },
  {
    id: 2,
    question: "What is a closure in JavaScript?",
    optionA: "A way to close browser windows",
    optionB: "A function with access to its outer scope",
    optionC: "A method to end loops",
    optionD: "A way to close database connections",
    correctAnswer: "B",
    explanation:
      "A closure is a function that has access to variables in its outer lexical scope, even after the outer function has returned",
    explanations: {
      A: "Incorrect. Closures have nothing to do with browser windows.",
      B: "Correct! A closure maintains access to variables from its outer scope.",
      C: "Incorrect. Loops are controlled by break or continue statements.",
      D: "Incorrect. Database connections are handled differently.",
    },
  },
  {
    id: 3,
    question: "What is the purpose of the Promise object?",
    optionA: "To make code run faster",
    optionB: "To handle asynchronous operations",
    optionC: "To store global variables",
    optionD: "To create loops",
    correctAnswer: "B",
    explanation:
      "Promises are used to handle asynchronous operations and their potential results (success or failure)",
    explanations: {
      A: "Incorrect. Promises don't inherently make code faster.",
      B: "Correct! Promises handle asynchronous operations in a more manageable way.",
      C: "Incorrect. Promises aren't used for variable storage.",
      D: "Incorrect. Promises aren't related to loop creation.",
    },
  },
  {
    id: 4,
    question: "What is the purpose of the async/await keywords?",
    optionA: "To create variables",
    optionB: "To define functions",
    optionC: "To handle promises more elegantly",
    optionD: "To create loops",
    correctAnswer: "C",
    explanation:
      "async/await provides a more readable way to work with promises using synchronous-looking code",
    explanations: {
      A: "Incorrect. async/await isn't used for variable declaration.",
      B: "Incorrect. While async is used with functions, that's not its main purpose.",
      C: "Correct! async/await makes working with promises more readable and maintainable.",
      D: "Incorrect. async/await isn't used for creating loops.",
    },
  },
  {
    id: 5,
    question: "What is event bubbling in JavaScript?",
    optionA: "Creating new events",
    optionB: "Stopping event propagation",
    optionC: "Event propagation from child to parent elements",
    optionD: "Creating event listeners",
    correctAnswer: "C",
    explanation:
      "Event bubbling is when an event triggers on the deepest target element and bubbles up through parent elements",
    explanations: {
      A: "Incorrect. Event bubbling is about propagation, not creation.",
      B: "Incorrect. That's what stopPropagation() does, not bubbling itself.",
      C: "Correct! Events bubble up from the target element through its ancestors.",
      D: "Incorrect. Event listeners are how we handle events, not how they propagate.",
    },
  },
  {
    id: 6,
    question: "What is destructuring in JavaScript?",
    optionA: "Deleting objects",
    optionB: "Breaking down arrays/objects into variables",
    optionC: "Cleaning up memory",
    optionD: "Creating new objects",
    correctAnswer: "B",
    explanation:
      "Destructuring allows you to unpack values from arrays or properties from objects into distinct variables",
    explanations: {
      A: "Incorrect. Destructuring doesn't delete anything.",
      B: "Correct! Destructuring extracts values into separate variables.",
      C: "Incorrect. Memory management is handled by garbage collection.",
      D: "Incorrect. Destructuring extracts values, it doesn't create new objects.",
    },
  },
  {
    id: 7,
    question: "What is the purpose of the map() method?",
    optionA: "To filter arrays",
    optionB: "To transform each array element",
    optionC: "To sort arrays",
    optionD: "To find elements",
    correctAnswer: "B",
    explanation:
      "map() creates a new array with the results of calling a function for every array element",
    explanations: {
      A: "Incorrect. filter() is used for filtering arrays.",
      B: "Correct! map() transforms each element according to a provided function.",
      C: "Incorrect. sort() is used for sorting arrays.",
      D: "Incorrect. find() is used for finding elements.",
    },
  },
  {
    id: 8,
    question: "What is the purpose of the 'use strict' directive?",
    optionA: "To make code run faster",
    optionB: "To enable new features",
    optionC: "To enforce stricter parsing and error handling",
    optionD: "To include external scripts",
    correctAnswer: "C",
    explanation:
      "'use strict' enables strict mode which catches common mistakes and prevents unsafe actions",
    explanations: {
      A: "Incorrect. Strict mode doesn't necessarily improve performance.",
      B: "Incorrect. It restricts features rather than enabling new ones.",
      C: "Correct! Strict mode enforces stricter parsing and error handling.",
      D: "Incorrect. External scripts are included using <script> tags or imports.",
    },
  },
  {
    id: 9,
    question: "What is the spread operator (...) used for?",
    optionA: "To create functions",
    optionB: "To spread elements of arrays/objects",
    optionC: "To declare variables",
    optionD: "To create loops",
    correctAnswer: "B",
    explanation:
      "The spread operator allows an iterable to be expanded into individual elements",
    explanations: {
      A: "Incorrect. Functions are created using function keyword or arrow syntax.",
      B: "Correct! The spread operator expands elements of iterables.",
      C: "Incorrect. Variables are declared using let, const, or var.",
      D: "Incorrect. Loops are created using for, while, etc.",
    },
  },
  {
    id: 10,
    question: "What is the purpose of JSON.stringify()?",
    optionA: "To parse JSON",
    optionB: "To convert objects to JSON strings",
    optionC: "To validate JSON",
    optionD: "To create objects",
    correctAnswer: "B",
    explanation:
      "JSON.stringify() converts a JavaScript value to a JSON string",
    explanations: {
      A: "Incorrect. JSON.parse() is used to parse JSON strings.",
      B: "Correct! JSON.stringify() converts JavaScript values to JSON strings.",
      C: "Incorrect. It converts data, doesn't validate it.",
      D: "Incorrect. Objects are created using object literals or constructors.",
    },
  },
  {
    id: 11,
    question: "What is the difference between localStorage and sessionStorage?",
    optionA: "There is no difference",
    optionB: "localStorage is faster than sessionStorage",
    optionC:
      "sessionStorage persists after browser close, localStorage doesn't",
    optionD:
      "localStorage persists after browser close, sessionStorage doesn't",
    correctAnswer: "D",
    explanation:
      "localStorage data persists until explicitly cleared, while sessionStorage data is cleared when the browser session ends",
    explanations: {
      A: "Incorrect. There are important differences in how long the data persists.",
      B: "Incorrect. Their performance characteristics are similar.",
      C: "Incorrect. It's the opposite - localStorage persists after browser close.",
      D: "Correct! localStorage data persists even after the browser is closed, while sessionStorage data is cleared when the browser session ends.",
    },
  },
  {
    id: 12,
    question: "What is the purpose of the 'this' keyword in JavaScript?",
    optionA: "To create new objects",
    optionB: "To reference the current function",
    optionC: "To reference the current object context",
    optionD: "To reference global variables",
    correctAnswer: "C",
    explanation:
      "The 'this' keyword refers to the object that is currently executing the code",
    explanations: {
      A: "Incorrect. 'this' references existing objects, it doesn't create them.",
      B: "Incorrect. 'this' refers to the object context, not the function itself.",
      C: "Correct! 'this' refers to the current object context in which code is executing.",
      D: "Incorrect. Global variables are accessed directly or through window object.",
    },
  },
  {
    id: 13,
    question: "What is event delegation in JavaScript?",
    optionA: "Creating multiple event listeners",
    optionB: "Removing event listeners",
    optionC: "Handling events on parent for child elements",
    optionD: "Preventing event propagation",
    correctAnswer: "C",
    explanation:
      "Event delegation is a technique of handling events on a parent element for its present and future child elements",
    explanations: {
      A: "Incorrect. Event delegation actually reduces the number of event listeners.",
      B: "Incorrect. Event delegation isn't about removing listeners.",
      C: "Correct! Event delegation handles events on parent elements for their children.",
      D: "Incorrect. That's what stopPropagation() does.",
    },
  },
  {
    id: 14,
    question: "What is the purpose of the reduce() method?",
    optionA: "To filter array elements",
    optionB: "To transform array elements",
    optionC: "To accumulate array elements into a single value",
    optionD: "To sort array elements",
    correctAnswer: "C",
    explanation:
      "reduce() executes a reducer function on each element, resulting in a single output value",
    explanations: {
      A: "Incorrect. filter() is used for filtering arrays.",
      B: "Incorrect. map() is used for transforming arrays.",
      C: "Correct! reduce() accumulates values into a single result.",
      D: "Incorrect. sort() is used for sorting arrays.",
    },
  },
  {
    id: 15,
    question: "What is the purpose of the fetch API?",
    optionA: "To manipulate DOM elements",
    optionB: "To make HTTP requests",
    optionC: "To store data locally",
    optionD: "To create animations",
    correctAnswer: "B",
    explanation:
      "The fetch API provides an interface for making HTTP requests to servers",
    explanations: {
      A: "Incorrect. DOM manipulation is done with other methods.",
      B: "Correct! fetch is used to make HTTP requests to servers.",
      C: "Incorrect. Local storage is used for storing data locally.",
      D: "Incorrect. Animations are handled by CSS or animation APIs.",
    },
  },
  {
    id: 16,
    question: "What is the purpose of the Set object?",
    optionA: "To create arrays",
    optionB: "To store unique values",
    optionC: "To sort data",
    optionD: "To create objects",
    correctAnswer: "B",
    explanation:
      "Set is a collection of unique values, where each value can occur only once",
    explanations: {
      A: "Incorrect. Arrays are created using [] syntax.",
      B: "Correct! Set objects store unique values of any type.",
      C: "Incorrect. Sorting is done using sort() method.",
      D: "Incorrect. Objects are created using {} syntax.",
    },
  },
  {
    id: 17,
    question: "What is the purpose of try...catch blocks?",
    optionA: "To create loops",
    optionB: "To define functions",
    optionC: "To handle errors gracefully",
    optionD: "To declare variables",
    correctAnswer: "C",
    explanation:
      "try...catch blocks are used to handle potential errors in code execution",
    explanations: {
      A: "Incorrect. Loops are created using for, while, etc.",
      B: "Incorrect. Functions are defined using function keyword or arrow syntax.",
      C: "Correct! try...catch handles errors in a controlled way.",
      D: "Incorrect. Variables are declared using let, const, or var.",
    },
  },
  {
    id: 18,
    question: "What is the purpose of the bind() method?",
    optionA: "To join arrays",
    optionB: "To create new functions",
    optionC: "To permanently set 'this' context",
    optionD: "To bind event listeners",
    correctAnswer: "C",
    explanation:
      "bind() creates a new function with a fixed 'this' context regardless of how it's called",
    explanations: {
      A: "Incorrect. Arrays are joined using join() method.",
      B: "Incorrect. While bind() creates a new function, its main purpose is setting context.",
      C: "Correct! bind() permanently sets the 'this' context of a function.",
      D: "Incorrect. Event listeners are added using addEventListener.",
    },
  },
  {
    id: 19,
    question: "What is the purpose of the Object.keys() method?",
    optionA: "To create object keys",
    optionB: "To return an array of object's keys",
    optionC: "To modify object keys",
    optionD: "To delete object keys",
    correctAnswer: "B",
    explanation:
      "Object.keys() returns an array of a given object's enumerable property names",
    explanations: {
      A: "Incorrect. Keys are created when defining object properties.",
      B: "Correct! Object.keys() returns an array of the object's enumerable property names.",
      C: "Incorrect. Keys are modified by directly reassigning properties.",
      D: "Incorrect. Keys are deleted using the delete operator.",
    },
  },
  {
    id: 20,
    question: "What is the purpose of the async function declaration?",
    optionA: "To make code run faster",
    optionB: "To declare regular functions",
    optionC: "To automatically return promises",
    optionD: "To create synchronous code",
    correctAnswer: "C",
    explanation:
      "async functions automatically wrap the return value in a promise and allow the use of await",
    explanations: {
      A: "Incorrect. async doesn't necessarily make code faster.",
      B: "Incorrect. Regular functions are declared without async.",
      C: "Correct! async functions automatically return promises and enable await usage.",
      D: "Incorrect. async functions are for handling asynchronous operations.",
    },
  },
  {
    id: 21,
    question: "What is the purpose of the Array.prototype.filter() method?",
    optionA: "To modify array elements",
    optionB: "To create a new array with elements that pass a test",
    optionC: "To sort array elements",
    optionD: "To join array elements",
    correctAnswer: "B",
    explanation:
      "filter() creates a new array with elements that pass the test implemented by the provided function",
    explanations: {
      A: "Incorrect. map() is used to modify array elements.",
      B: "Correct! filter() creates a new array with elements that satisfy a condition.",
      C: "Incorrect. sort() is used to sort array elements.",
      D: "Incorrect. join() is used to concatenate array elements.",
    },
  },
  {
    id: 22,
    question: "What is the purpose of the Object.assign() method?",
    optionA: "To create new objects",
    optionB: "To delete object properties",
    optionC: "To copy properties from one object to another",
    optionD: "To compare objects",
    correctAnswer: "C",
    explanation:
      "Object.assign() copies all enumerable properties from one or more source objects to a target object",
    explanations: {
      A: "Incorrect. While it can create copies, that's not its primary purpose.",
      B: "Incorrect. Properties are deleted using the delete operator.",
      C: "Correct! Object.assign() copies properties between objects.",
      D: "Incorrect. Objects are compared using other methods.",
    },
  },
  {
    id: 23,
    question: "What is the purpose of the Array.prototype.includes() method?",
    optionA: "To add elements to an array",
    optionB: "To check if an array contains a specific element",
    optionC: "To remove elements from an array",
    optionD: "To sort array elements",
    correctAnswer: "B",
    explanation:
      "includes() determines whether an array includes a certain value among its entries",
    explanations: {
      A: "Incorrect. push() or unshift() are used to add elements.",
      B: "Correct! includes() checks if an element exists in the array.",
      C: "Incorrect. pop() or splice() are used to remove elements.",
      D: "Incorrect. sort() is used to sort array elements.",
    },
  },
  {
    id: 24,
    question: "What is the purpose of the Array.prototype.find() method?",
    optionA: "To check if an element exists",
    optionB: "To find the index of an element",
    optionC: "To return the first element that passes a test",
    optionD: "To modify array elements",
    correctAnswer: "C",
    explanation:
      "find() returns the value of the first element in an array that passes the test function",
    explanations: {
      A: "Incorrect. includes() is used to check existence.",
      B: "Incorrect. indexOf() finds the index of an element.",
      C: "Correct! find() returns the first element that satisfies the testing function.",
      D: "Incorrect. map() is used to modify elements.",
    },
  },
  {
    id: 25,
    question: "What is the purpose of the Object.freeze() method?",
    optionA: "To delete an object",
    optionB: "To copy an object",
    optionC: "To prevent object modification",
    optionD: "To compare objects",
    correctAnswer: "C",
    explanation:
      "Object.freeze() makes an object immutable - properties can't be added, deleted, or modified",
    explanations: {
      A: "Incorrect. Objects are deleted by setting to null or removing references.",
      B: "Incorrect. Object.assign() or spread operator is used for copying.",
      C: "Correct! Object.freeze() prevents any modifications to an object.",
      D: "Incorrect. Objects are compared using other methods.",
    },
  },
  {
    id: 26,
    question: "What is the purpose of the Array.prototype.every() method?",
    optionA: "To modify all elements",
    optionB: "To check if all elements pass a test",
    optionC: "To find an element",
    optionD: "To sort elements",
    correctAnswer: "B",
    explanation:
      "every() tests whether all elements in the array pass the test implemented by the provided function",
    explanations: {
      A: "Incorrect. map() is used to modify elements.",
      B: "Correct! every() checks if all elements satisfy a condition.",
      C: "Incorrect. find() is used to find elements.",
      D: "Incorrect. sort() is used to sort elements.",
    },
  },
  {
    id: 27,
    question: "What is the purpose of the Array.prototype.some() method?",
    optionA: "To modify some elements",
    optionB: "To delete some elements",
    optionC: "To check if at least one element passes a test",
    optionD: "To sort some elements",
    correctAnswer: "C",
    explanation:
      "some() tests whether at least one element in the array passes the test implemented by the provided function",
    explanations: {
      A: "Incorrect. map() is used to modify elements.",
      B: "Incorrect. filter() or splice() remove elements.",
      C: "Correct! some() checks if at least one element satisfies a condition.",
      D: "Incorrect. sort() is used to sort elements.",
    },
  },
  {
    id: 28,
    question: "What is the purpose of the Promise.all() method?",
    optionA: "To cancel all promises",
    optionB: "To wait for all promises to complete",
    optionC: "To reject all promises",
    optionD: "To create new promises",
    correctAnswer: "B",
    explanation:
      "Promise.all() waits for all promises to resolve and returns an array of their results",
    explanations: {
      A: "Incorrect. Promises cannot be cancelled once created.",
      B: "Correct! Promise.all() waits for all promises to complete.",
      C: "Incorrect. It doesn't reject promises.",
      D: "Incorrect. New promises are created using the Promise constructor.",
    },
  },
  {
    id: 29,
    question: "What is the purpose of the Promise.race() method?",
    optionA: "To run promises in parallel",
    optionB: "To return the fastest promise result",
    optionC: "To cancel other promises",
    optionD: "To combine promise results",
    correctAnswer: "B",
    explanation:
      "Promise.race() returns the result of the first promise that resolves or rejects",
    explanations: {
      A: "Incorrect. Promise.all() runs promises in parallel.",
      B: "Correct! Promise.race() returns the first promise to complete.",
      C: "Incorrect. Promises cannot be cancelled.",
      D: "Incorrect. Promise.all() combines results.",
    },
  },
  {
    id: 30,
    question: "What is the purpose of the Object.seal() method?",
    optionA: "To delete an object",
    optionB: "To copy an object",
    optionC: "To prevent adding/deleting properties",
    optionD: "To freeze an object completely",
    correctAnswer: "C",
    explanation:
      "Object.seal() prevents adding or deleting properties but allows modifying existing ones",
    explanations: {
      A: "Incorrect. Objects are deleted by removing references.",
      B: "Incorrect. Object.assign() is used for copying.",
      C: "Correct! Object.seal() prevents adding/deleting but allows modification.",
      D: "Incorrect. Object.freeze() completely freezes an object.",
    },
  },
  {
    id: 31,
    question: "What is the purpose of the Array.prototype.flat() method?",
    optionA: "To remove elements from an array",
    optionB: "To flatten nested array structures",
    optionC: "To filter array elements",
    optionD: "To sort array elements",
    correctAnswer: "B",
    explanation:
      "flat() creates a new array with all sub-array elements concatenated recursively up to the specified depth",
    explanations: {
      A: "Incorrect. splice() or filter() remove elements.",
      B: "Correct! flat() flattens nested arrays into a single-level array.",
      C: "Incorrect. filter() is used to filter elements.",
      D: "Incorrect. sort() is used to sort elements.",
    },
  },
  {
    id: 32,
    question: "What is the purpose of the Object.entries() method?",
    optionA: "To list object methods",
    optionB: "To return an array of key-value pairs",
    optionC: "To count object properties",
    optionD: "To modify object properties",
    correctAnswer: "B",
    explanation:
      "Object.entries() returns an array of a given object's own enumerable string-keyed property [key, value] pairs",
    explanations: {
      A: "Incorrect. It returns all enumerable properties, not just methods.",
      B: "Correct! Object.entries() returns an array of [key, value] pairs.",
      C: "Incorrect. Object.keys().length would count properties.",
      D: "Incorrect. It doesn't modify the object.",
    },
  },
  {
    id: 33,
    question: "What is the purpose of the Array.prototype.flatMap() method?",
    optionA: "To only flatten arrays",
    optionB: "To only map over elements",
    optionC: "To map and then flatten results",
    optionD: "To sort and flatten arrays",
    correctAnswer: "C",
    explanation:
      "flatMap() first maps each element using a mapping function, then flattens the result into a new array",
    explanations: {
      A: "Incorrect. flat() is used just for flattening.",
      B: "Incorrect. map() is used just for mapping.",
      C: "Correct! flatMap() combines mapping and flattening operations.",
      D: "Incorrect. It doesn't involve sorting.",
    },
  },
  {
    id: 34,
    question: "What is the purpose of the Object.values() method?",
    optionA: "To validate object properties",
    optionB: "To return an array of object's values",
    optionC: "To modify object values",
    optionD: "To count object values",
    correctAnswer: "B",
    explanation:
      "Object.values() returns an array of a given object's own enumerable property values",
    explanations: {
      A: "Incorrect. It doesn't validate properties.",
      B: "Correct! Object.values() returns an array containing all object values.",
      C: "Incorrect. It doesn't modify the object.",
      D: "Incorrect. It returns values, not a count.",
    },
  },
  {
    id: 35,
    question: "What is the purpose of the Promise.allSettled() method?",
    optionA: "To cancel all promises",
    optionB: "To wait for first promise to settle",
    optionC: "To wait for all promises to settle",
    optionD: "To reject all promises",
    correctAnswer: "C",
    explanation:
      "Promise.allSettled() waits for all promises to settle (either fulfill or reject) and returns their results",
    explanations: {
      A: "Incorrect. Promises cannot be cancelled.",
      B: "Incorrect. That's similar to Promise.race().",
      C: "Correct! It waits for all promises to complete, regardless of success or failure.",
      D: "Incorrect. It doesn't reject promises.",
    },
  },
  {
    id: 36,
    question: "What is the purpose of the Array.prototype.at() method?",
    optionA: "To add elements to an array",
    optionB: "To find element index",
    optionC: "To access elements with positive/negative indices",
    optionD: "To modify elements",
    correctAnswer: "C",
    explanation:
      "at() takes an integer value and returns the item at that index, allowing positive and negative integers",
    explanations: {
      A: "Incorrect. push() or unshift() add elements.",
      B: "Incorrect. indexOf() finds element index.",
      C: "Correct! at() provides a way to access elements using positive or negative indices.",
      D: "Incorrect. It only accesses elements.",
    },
  },
  {
    id: 37,
    question: "What is the purpose of the Object.hasOwn() method?",
    optionA: "To create object properties",
    optionB: "To check if property exists directly on object",
    optionC: "To modify object properties",
    optionD: "To delete object properties",
    correctAnswer: "B",
    explanation:
      "Object.hasOwn() returns true if the specified object has the indicated property as its own property",
    explanations: {
      A: "Incorrect. Properties are created through assignment.",
      B: "Correct! It checks if a property exists directly on an object, not in its prototype chain.",
      C: "Incorrect. It doesn't modify properties.",
      D: "Incorrect. delete operator removes properties.",
    },
  },
  {
    id: 38,
    question: "What is the purpose of the Promise.any() method?",
    optionA: "To fulfill all promises",
    optionB: "To reject all promises",
    optionC: "To return first fulfilled promise",
    optionD: "To cancel promises",
    correctAnswer: "C",
    explanation:
      "Promise.any() returns a promise that fulfills when any of the input promises fulfills",
    explanations: {
      A: "Incorrect. Promise.all() fulfills all promises.",
      B: "Incorrect. It doesn't reject promises.",
      C: "Correct! It returns the first promise that fulfills successfully.",
      D: "Incorrect. Promises cannot be cancelled.",
    },
  },
  {
    id: 39,
    question: "What is the purpose of the Array.prototype.fill() method?",
    optionA: "To filter array elements",
    optionB: "To fill array with static value",
    optionC: "To find elements",
    optionD: "To sort elements",
    correctAnswer: "B",
    explanation:
      "fill() changes all elements in an array to a static value, from a start index to an end index",
    explanations: {
      A: "Incorrect. filter() is used for filtering.",
      B: "Correct! fill() replaces elements with a specified static value.",
      C: "Incorrect. find() is used to find elements.",
      D: "Incorrect. sort() is used for sorting.",
    },
  },
  {
    id: 40,
    question: "What is the purpose of the Object.preventExtensions() method?",
    optionA: "To freeze an object completely",
    optionB: "To seal an object",
    optionC: "To prevent adding new properties",
    optionD: "To delete all properties",
    correctAnswer: "C",
    explanation:
      "Object.preventExtensions() prevents new properties from being added to an object",
    explanations: {
      A: "Incorrect. Object.freeze() freezes objects completely.",
      B: "Incorrect. Object.seal() prevents adding/deleting but allows modification.",
      C: "Correct! It only prevents adding new properties to an object.",
      D: "Incorrect. It doesn't delete properties.",
    },
  },
  {
    id: 41,
    question: "What is the purpose of the WeakMap object in JavaScript?",
    optionA: "To create regular maps",
    optionB: "To store key-value pairs with weak references to objects",
    optionC: "To create arrays",
    optionD: "To store primitive values",
    correctAnswer: "B",
    explanation:
      "WeakMap holds key-value pairs where keys must be objects and are held weakly, allowing garbage collection",
    explanations: {
      A: "Incorrect. Regular Map is used for standard key-value storage.",
      B: "Correct! WeakMap allows object keys to be garbage collected when no longer referenced.",
      C: "Incorrect. Arrays are created using array literals or Array constructor.",
      D: "Incorrect. WeakMap can only use objects as keys, not primitive values.",
    },
  },
  {
    id: 42,
    question: "What is the purpose of the requestAnimationFrame method?",
    optionA: "To delay code execution",
    optionB: "To schedule animations in sync with browser's refresh rate",
    optionC: "To create timers",
    optionD: "To pause code execution",
    correctAnswer: "B",
    explanation:
      "requestAnimationFrame tells the browser to perform an animation before the next repaint",
    explanations: {
      A: "Incorrect. setTimeout is used for delaying code execution.",
      B: "Correct! requestAnimationFrame synchronizes animations with the browser's refresh rate.",
      C: "Incorrect. setInterval is used for creating timers.",
      D: "Incorrect. It doesn't pause code execution.",
    },
  },
  {
    id: 43,
    question: "What is the purpose of the Symbol primitive type?",
    optionA: "To create strings",
    optionB: "To create numbers",
    optionC: "To create unique identifiers",
    optionD: "To create objects",
    correctAnswer: "C",
    explanation:
      "Symbol creates a unique and immutable primitive value that can be used as a key for object properties",
    explanations: {
      A: "Incorrect. Strings are created using string literals or String constructor.",
      B: "Incorrect. Numbers are created using number literals or Number constructor.",
      C: "Correct! Symbols are guaranteed to be unique and are often used as object keys.",
      D: "Incorrect. Objects are created using object literals or constructors.",
    },
  },
  {
    id: 44,
    question: "What is the purpose of the WeakSet object?",
    optionA: "To store any type of values",
    optionB: "To store unique object references that can be garbage collected",
    optionC: "To create regular sets",
    optionD: "To store primitive values",
    correctAnswer: "B",
    explanation:
      "WeakSet allows storing weak references to objects that can be garbage collected when no longer referenced elsewhere",
    explanations: {
      A: "Incorrect. WeakSet can only store object references.",
      B: "Correct! WeakSet stores unique object references that don't prevent garbage collection.",
      C: "Incorrect. Regular Set is used for storing any type of unique values.",
      D: "Incorrect. WeakSet cannot store primitive values.",
    },
  },
  {
    id: 45,
    question: "What is the purpose of the queueMicrotask() function?",
    optionA: "To create regular timeouts",
    optionB: "To schedule tasks in the microtask queue",
    optionC: "To handle DOM events",
    optionD: "To create intervals",
    correctAnswer: "B",
    explanation:
      "queueMicrotask() queues a function to be executed in the microtask queue after the current task completes",
    explanations: {
      A: "Incorrect. setTimeout is used for creating timeouts.",
      B: "Correct! queueMicrotask schedules tasks in the microtask queue.",
      C: "Incorrect. Event listeners handle DOM events.",
      D: "Incorrect. setInterval is used for creating intervals.",
    },
  },
  {
    id: 46,
    question: "What is the purpose of the Array.prototype.findIndex() method?",
    optionA: "To find an element's value",
    optionB: "To find the first index that passes a test",
    optionC: "To check if an element exists",
    optionD: "To modify array elements",
    correctAnswer: "B",
    explanation:
      "findIndex() returns the index of the first element in an array that passes the test function",
    explanations: {
      A: "Incorrect. find() is used to get the element value.",
      B: "Correct! findIndex() returns the index of the first matching element.",
      C: "Incorrect. includes() checks if an element exists.",
      D: "Incorrect. map() is used to modify elements.",
    },
  },
  {
    id: 47,
    question: "What is the purpose of the Array.prototype.from() method?",
    optionA: "To create arrays from other objects",
    optionB: "To modify existing arrays",
    optionC: "To filter array elements",
    optionD: "To sort arrays",
    correctAnswer: "A",
    explanation:
      "Array.from() creates a new Array instance from an array-like or iterable object",
    explanations: {
      A: "Correct! Array.from() converts array-like objects into true arrays.",
      B: "Incorrect. It creates new arrays, doesn't modify existing ones.",
      C: "Incorrect. filter() is used for filtering arrays.",
      D: "Incorrect. sort() is used for sorting arrays.",
    },
  },
  {
    id: 48,
    question: "What is the purpose of the Object.is() method?",
    optionA: "To create objects",
    optionB: "To compare objects",
    optionC: "To determine if two values are the same value",
    optionD: "To modify objects",
    correctAnswer: "C",
    explanation:
      "Object.is() determines whether two values are the same value, handling special cases like NaN",
    explanations: {
      A: "Incorrect. Objects are created using object literals or constructors.",
      B: "Incorrect. It compares values, not object references.",
      C: "Correct! Object.is() provides strict equality comparison with proper NaN handling.",
      D: "Incorrect. It doesn't modify objects.",
    },
  },
  {
    id: 49,
    question: "What is the purpose of the Proxy object in JavaScript?",
    optionA: "To create object copies",
    optionB: "To define custom behavior for basic operations",
    optionC: "To prevent object modifications",
    optionD: "To merge objects",
    correctAnswer: "B",
    explanation:
      "Proxy allows you to create an object that can intercept and redefine fundamental operations for another object",
    explanations: {
      A: "Incorrect. Object.assign() or spread operator creates object copies.",
      B: "Correct! Proxy objects define custom behavior for operations like property lookup, assignment, etc.",
      C: "Incorrect. Object.freeze() prevents modifications.",
      D: "Incorrect. Object.assign() merges objects.",
    },
  },
  {
    id: 50,
    question: "What is the purpose of the Reflect object in JavaScript?",
    optionA: "To create mirrors",
    optionB: "To provide methods for interceptable operations",
    optionC: "To reflect DOM elements",
    optionD: "To reverse strings",
    correctAnswer: "B",
    explanation:
      "Reflect provides methods for interceptable JavaScript operations, working alongside Proxy handlers",
    explanations: {
      A: "Incorrect. Reflect is not related to creating mirrors.",
      B: "Correct! Reflect provides methods that complement the Proxy API and interceptable operations.",
      C: "Incorrect. Reflect is not related to DOM manipulation.",
      D: "Incorrect. String methods handle string reversal.",
    },
  },
];

export default questions;
